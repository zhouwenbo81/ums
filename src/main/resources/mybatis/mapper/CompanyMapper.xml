<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zwb.ums.mapper.CompanyMapper" >
  <resultMap id="BaseResultMap" type="com.zwb.ums.model.po.Company" >
    <id column="company_id" property="companyId" jdbcType="CHAR" />
    <result column="company_name" property="companyName" jdbcType="VARCHAR" />
    <result column="company_abbreviation" property="companyAbbreviation" jdbcType="VARCHAR" />
    <result column="office_address" property="officeAddress" jdbcType="VARCHAR" />
    <result column="company_description" property="companyDescription" jdbcType="VARCHAR" />
    <result column="company_state" property="companyState" jdbcType="CHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    company_id, company_name, company_abbreviation, office_address, company_description, 
    company_state, create_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from t_company
    where company_id = #{companyId,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from t_company
    where company_id = #{companyId,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="com.zwb.ums.model.po.Company" >
    insert into t_company (company_id, company_name, company_abbreviation, 
      office_address, company_description, company_state, 
      create_time)
    values (#{companyId,jdbcType=CHAR}, #{companyName,jdbcType=VARCHAR}, #{companyAbbreviation,jdbcType=VARCHAR}, 
      #{officeAddress,jdbcType=VARCHAR}, #{companyDescription,jdbcType=VARCHAR}, #{companyState,jdbcType=CHAR}, 
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.zwb.ums.model.po.Company" >
    insert into t_company
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="companyId != null" >
        company_id,
      </if>
      <if test="companyName != null" >
        company_name,
      </if>
      <if test="companyAbbreviation != null" >
        company_abbreviation,
      </if>
      <if test="officeAddress != null" >
        office_address,
      </if>
      <if test="companyDescription != null" >
        company_description,
      </if>
      <if test="companyState != null" >
        company_state,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="companyId != null" >
        #{companyId,jdbcType=CHAR},
      </if>
      <if test="companyName != null" >
        #{companyName,jdbcType=VARCHAR},
      </if>
      <if test="companyAbbreviation != null" >
        #{companyAbbreviation,jdbcType=VARCHAR},
      </if>
      <if test="officeAddress != null" >
        #{officeAddress,jdbcType=VARCHAR},
      </if>
      <if test="companyDescription != null" >
        #{companyDescription,jdbcType=VARCHAR},
      </if>
      <if test="companyState != null" >
        #{companyState,jdbcType=CHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zwb.ums.model.po.Company" >
    update t_company
    <set >
      <if test="companyName != null" >
        company_name = #{companyName,jdbcType=VARCHAR},
      </if>
      <if test="companyAbbreviation != null" >
        company_abbreviation = #{companyAbbreviation,jdbcType=VARCHAR},
      </if>
      <if test="officeAddress != null" >
        office_address = #{officeAddress,jdbcType=VARCHAR},
      </if>
      <if test="companyDescription != null" >
        company_description = #{companyDescription,jdbcType=VARCHAR},
      </if>
      <if test="companyState != null" >
        company_state = #{companyState,jdbcType=CHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where company_id = #{companyId,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zwb.ums.model.po.Company" >
    update t_company
    set company_name = #{companyName,jdbcType=VARCHAR},
      company_abbreviation = #{companyAbbreviation,jdbcType=VARCHAR},
      office_address = #{officeAddress,jdbcType=VARCHAR},
      company_description = #{companyDescription,jdbcType=VARCHAR},
      company_state = #{companyState,jdbcType=CHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where company_id = #{companyId,jdbcType=CHAR}
  </update>
  
  <!-- 新增开始 -->
  <sql id="sql_count">
  	select count(*)
  </sql>
  <sql id="sql_select">
  	select *
  </sql>
  <sql id="sql_where">
  	from t_company
  	<where>
  	  company_state != '10'
  	  <if test="companyName != null and companyName != ''" >
        and company_name like CONCAT('%',#{companyName,jdbcType=VARCHAR},'%')
      </if>
      <if test="companyState != null and companyState != ''" >
	    and company_state = #{companyState,jdbcType=CHAR}
      </if>
    </where>
    order by create_time desc
  </sql>
  <sql id="sql_limit">
  	limit #{splitPage.startRow,jdbcType=INTEGER},#{splitPage.pageSize,jdbcType=INTEGER}
  </sql>
  <select id="selectAllObj" resultMap="BaseResultMap" parameterType="com.zwb.ums.model.vo.CompanyVO">
  	<include refid="sql_select"/>
  	<include refid="sql_where"/>
  	<include refid="sql_limit"/>
  </select>
  <select id="selectAllObjCount" resultType="INTEGER" parameterType="com.zwb.ums.model.vo.CompanyVO">
  	<include refid="sql_count"/>
  	<include refid="sql_where"/>
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
    from t_company
    where company_state = '01'
    order by create_time desc
  </select>

  <select id="selectAllCompany" resultMap="BaseResultMap" parameterType="com.zwb.ums.model.po.Company">
    select
    company_id, company_name, company_abbreviation
    from t_company
    <where>
      <if test="companyState != null and companyState != ''" >
        company_state = #{companyState,jdbcType=CHAR}
      </if>
      <if test="companyState == null or companyState == ''" >
        company_state = '01'
      </if>
    </where>
    order by create_time desc
  </select>

  <!-- 根据用户Id查询该用户所属公司 -->
  <select id="selectByUserId" resultMap="BaseResultMap" parameterType="java.lang.String">
    select
    DISTINCT a.company_id, a.company_name, a.company_abbreviation
    from t_company a left join t_relation b on a.company_id = b.company_id
    where b.user_id = #{userId,jdbcType=CHAR} and b.relation_type in (02, 03)
  </select>

  <!-- 根据部门Id查询该部门所属公司 -->
  <select id="selectCompanyByDepartmentId" resultMap="BaseResultMap" parameterType="java.lang.String">
    select a.company_id, a.company_name, a.company_abbreviation
    from t_company a
    LEFT JOIN t_relation b
    ON a.company_id = b.company_id and b.relation_type ='00'
    where b.department_id = #{departmentId,jdbcType=CHAR}
  </select>

  <!-- 根据职位Id查询该职位的所属公司 -->
  <select id="selectCompanyByEmploymentId" resultMap="BaseResultMap" parameterType="java.lang.String">
    select a.company_id, a.company_name, a.company_abbreviation
    from t_company a
    LEFT JOIN t_relation b
    ON a.company_id = b.company_id and b.relation_type ='01'
    where b.employment_id = #{employmentId,jdbcType=CHAR}
  </select>

  <!-- 公司信息与下属部门信息映射 -->
  <!--<resultMap id="CompanyResultMap" type="com.zwb.ums.model.po.Company" >-->
    <!--<id column="company_id" property="companyId" jdbcType="CHAR" />-->
    <!--<result column="company_name" property="companyName" jdbcType="VARCHAR" />-->
    <!--<result column="company_abbreviation" property="companyAbbreviation" jdbcType="VARCHAR" />-->
    <!--<collection property="departments" column="{userId=user_id,companyId=company_id}" select="com.zwb.ums.mapper.DepartmentMapper.selectByUserIdAndCompanyId" />-->
  <!--</resultMap>-->

  <!-- 根据用户Id查询该用户所属公司 -->
  <!--<select id="selectCompanyByUserId" resultMap="CompanyResultMap" parameterType="java.lang.String">-->
    <!--select-->
    <!--DISTINCT a.company_id, a.company_name, a.company_abbreviation,b.user_id-->
    <!--from t_company a left join t_relation b on a.company_id = b.company_id-->
    <!--where b.user_id = #{userId,jdbcType=CHAR} and b.relation_type in (02, 03)-->
  <!--</select>-->
  
  
</mapper>